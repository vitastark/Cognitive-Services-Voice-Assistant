# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# "Customize your pipeline" on MS docs:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/customize-pipeline

# Specific branch build with batching
trigger:
  batch: true
  branches:
    include:
    - main

pr:
  branches:
    include:
    - main

variables:

  # Common Build configurations
  buildPlatformNative: x64
  buildPlatformManaged: 'Any CPU'
  buildConfiguration: Release
  dotNetCoreRuntimeIdentifier: win-x64 
  dotNetCoreVersion: '3.1'

  # Sample 1: Windows Voice Assistant Client, C# WPF (\clients\csharp-wpf)
  sample1Name: VoiceAssistantClient
  sample1Folder: 'clients\csharp-wpf'
  sample1Solution: '$(sample1Folder)\$(sample1Name).sln'
  sample1PublishedArtifactPath: '$(sample1Folder)\$(sample1Name)\bin\$(buildPlatformNative)\$(buildConfiguration)'
  sample1PublishedArtifactName: 'WindowsVoiceAssistantClient-$(Build.BuildNumber)'

  # Sample 2: Voice Assistant Test, .NET core (\clients\csharp-dotnet-core\voice-assistant-test)
  sample2Name: VoiceAssistantTest
  sample2Folder: 'clients\csharp-dotnet-core\voice-assistant-test\tool'
  sample2Solution: '$(sample2Folder)\$(sample2Name).sln'
  sample2PublishedArtifactPath: '$(sample2Name)Publish'
  sample2PublishedArtifactName: 'VoiceAssistantTest-$(Build.BuildNumber)'

  # Sample 3: Windows console Voice Assistant Client, C++ (\clients\cpp-console)
  sample3Name: VoiceAssistantCPPClient
  sample3Folder: 'clients\cpp-console'
  sample3Solution: '$(sample3Folder)\src\windows\cppSample.sln'
  sample3PublishedArtifactPath: '$(sample3Folder)\src\windows\$(buildPlatformNative)\$(buildConfiguration)'
  sample3PublishedArtifactName: '$(sample3Name)-$(Build.BuildNumber)'
 
  # Sample 4: UWP Voice Assistant Sample (\clients\csharp-uwp)
  sample4Name: UWPVoiceAssistantSample
  sample4Folder: 'clients\csharp-uwp'
  sample4Solution: '$(sample4Folder)\$(sample4Name).sln'
  sample4PublishedArtifactPath: '$(sample4Folder)\$(sample4Name)\bin\$(buildPlatformNative)\$(buildConfiguration)'
  sample4PublishedArtifactName: '$(sample4Name)-$(Build.BuildNumber)'

  # ESRP code signing
  signParams: |
    [
      {
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolSign",
        "parameters": [
          {
            "parameterName": "OpusName",
            "parameterValue": "Microsoft"
          },
          {
            "parameterName": "OpusInfo",
            "parameterValue": "http://www.microsoft.com"
          },
          {
            "parameterName": "PageHash",
            "parameterValue": "/NPH"
          },
          {
            "parameterName": "FileDigest",
            "parameterValue": "/fd sha256"
          },
          {
            "parameterName": "TimeStamp",
            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
          }
        ],
        "toolName": "signtool.exe",
        "toolVersion": "6.2.9304.0"
      },
      {
          "keyCode": "CP-230012",
          "operationSetCode": "SigntoolVerify",
          "parameters": [ ],
          "toolName": "signtool.exe",
          "toolVersion": "6.2.9304.0"
       }
    ]
    
jobs:
- job: Windows_Builds
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: Bash@3
    displayName: 'Export source app'
    inputs:
      targetType: filePath
      filePath: ./bash/export.sh
      arguments: '-r westus2 -s $(SubscriptionKey) -c $(Culture) -a $(SourceAppId) -f ExportedDialogModel.json'
      workingDirectory: bash
      failOnStderr: true

  - task: Bash@3
    displayName: 'Import to target app'
    inputs:
      targetType: filePath
      filePath: ./bash/import.sh
      arguments: '-r westus2 -s $(SubscriptionKey) -c $(Culture) -a $(TargetAppId) -f ExportedDialogModel.json'
      workingDirectory: bash
      failOnStderr: true

  - task: Bash@3
    displayName: 'Train and Publish target app'
    inputs:
      targetType: filePath
      filePath: './bash/train-and-publish.sh'
      arguments: '-r westus2 -s $(SubscriptionKey) -c $(Culture) -a $(TargetAppId)'
      workingDirectory: bash
      failOnStderr: true
      
- job: Linux_Builds
  pool: 
    name: Azure Pipelines
    vmImage: 'ubuntu-latest'
    
  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: sudo apt-get install libasound2-dev
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: ./buildx64Linux.sh
      workingDirectory: ./clients/cpp-console/scripts/linux/
